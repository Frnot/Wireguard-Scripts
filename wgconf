#!/bin/bash
# v0.7.0
# static variables
WG_DIR=/etc/wireguard


main() {
	clear
	declare -A ints
	retrieve_interfaces ints

	if [ ${#ints[@]} -eq 0 ]
	then
		printf "No VPN interfaces found.\n\n"
		new_interface
		main
	fi
	
	for i in "${!ints[@]}"
	do
		printf "$i : ${ints[$i]}\n"
	done
	printf "\n1) Add Interface\n"
	printf "2) Remove Interface\n"
	printf "3) Edit Interface\n"
	while true; do
		read -p '> ' choice
		case $choice in
			'1')
				new_interface
				main
				;;
			'2')
				choose_int ints "Choose an interface to delete" rtn
				delete_interface $rtn
				main
				;;
			'3')
				choose_int ints "Choose an interface to modify" rtn
				edit_interface $rtn
				main
				;;
		esac
	done
}

edit_interface() {
	clear
	local int=$1
	printf "\nEdit interface: $int\n"
	printf '%s\n' "---------------"
	printf "1) Re-Key Interface\n"
	printf "2) List Peers\n"
	printf "3) View Peer config\n"
	printf "4) Add Peer\n"
	printf "5) Remove Peer\n"
	printf "6) Edit Peer\n"

	while true; do
		read -p '> ' choice
		case $choice in
			'1')
				rekey_interface $1
				todo
				edit_interface
				;;
			'2')
				choose_peer $int
				[ $? != 0 ] && continue
				todo
				edit_interface
				;;
			'3')
				choose_peer $int "to view:" rtn
				[ $? != 0 ] && continue
				show_peer_config $rtn
				edit_interface
				;;
			'4')
				new_peer $int
				edit_interface
				;;
			'5')
				choose_peer $int "to delete" rtn
				[ $? != 0 ] && continue
				delete_peer $rtn
				edit_interface
				;;
			'6')
				choose_peer $int "to modify" rtn
				[ $? != 0 ] && continue
				edit_peer $rtn
				edit_interface
				;;
		esac
	done
}

choose_peer() {
	local int=$1
	local msg=$2
	local conf_files=($(find $WG_DIR/${int}_peers -type f -name "*.conf"))
	
	#TODO use gen_peer_list instead
	
	declare -A peers
	for i in "${conf_files[@]}"
	do
		IP_PREFIX=$(printf "$IPV6_PREFIX\|$IPV4_PREFIX" | sed  's/\./\\./g')
		local num=$(sed -ne "/Address/ s/^.*\($IP_PREFIX\)\(.*\)\/.*/\2/p" $i)
		
		if [ $num -gt 254 ]; then
			printf "error - peer $i - peer number exceeds limit!\n"
			continue
		fi
		
		peers[$num]=$i
	done
	
	if [ "${#peers[@]}" = 0 ]; then
		printf "This interface has no peers $msg - Add one.\n"
		return 1
	fi
	
	printf "\n#     Name\n" 
	#TODO: format
	for i in "${!peers[@]}"
	do
		printf "$i) $(basename ${peers[$i]} .conf)\n"
	done
	
	printf "\nChoose peer $msg\n"
	while true; do
		read -p 'Peer #: ' choice
		if ! [ -z ${peers[$choice]} ]; then
			break
		fi
	done
	eval $3="${peers[$choice]}"
}

###############################################################################################################################

new_peer() {
	clear
	local intconf=$1
	local peer_dir=$WG_DIR/$(basename $intconf .conf)_peers
	local peerconf=$peer_dir/$name.conf
	
	printf "Create new peer on interface $(basename $intconf .conf)\n"
	read -p "Peer Name: " name



	local key=$(wg genkey)
	local pub=$(printf $key | wg pubkey)
	local psk=$(wg genpsk)
	local intpub=$(cat $(printf $intconf | sed 's/conf/pub/g'))

	get_peer_number $intconf peernum

	# TODO: clean up this trash

	# Pulls addresses from interface config
	local intaddresses=$(sed -ne 's/^.*Address[[:space:]]*=[[:space:]]*//p' $intconf)
	# If addresses contains a comma there are two addresses
	if printf "$addresses" | grep -q ',' ; then
		local intaddr1=$(printf $intaddresses | sed -ne 's/\(.*\/.*\),.*/\1/p')
		local intaddr2=$(printf $intaddresses | sed -ne 's/.*,[[:space:]]*\(.*\/.*\)[[:space:]]*/\1/p')
	else
		local intaddr1=$(printf $intaddresses | sed -ne 's/\(.*\/.*\),.*/\1/p')
	fi
	# Replaces last octet with peer number
	local addr1=$(printf $intaddr1 | sed -ne "s/\(.*[\.:]\).*\(\/.*\)/\1$peernum\2/p"
	local addresses=$addr1
	# TODO check if this ! -z even works
	if [ ! -z $intaddr2 ]; then
		local addr2=$(printf $intaddr2 | sed -ne "s/\(.*[\.:]\).*\(\/.*\)/\1$peernum\2/p"
		local addresses="$addresses, $addr1"
	fi

	# If peer template doesn't exist, create it.
	if [ ! -f $peer_dir/template ]; then
		create_peer_template $(basename $intconf .conf)
	fi
	
	cp $peer_dir/template $peerconf
	sed -i "s/Address =/& $addresses/" $peerconf
	sed -i "s/PrivateKey =/& $key/" $peerconf
	sed -i "s/PublicKey =/& $intpub/" $peerconf
	sed -i "s/PresharedKey =/& $psk/" $peerconf
	
	#TODO ask for allowed ips (enter for all
	
	#TODO: ask if this is good (cat config)
	#if not redo

	# Edit interface config
	cat >>$intconf <<EOF

[Peer]
PublicKey = $pub
PresharedKey = $psk
AllowedIPs = $ADDRv6/128, $ADDRv4/32
EOF

	#TODO update wireguard daemon

	show_peer_config $peerconf
}

show_peer_config() {
	clear
	local configpath=$1
	qrencode -t ansiutf8 < $configpath
	cat $configpath
}

get_peer_number() {
	local intname=$1
	local intconf=$WG_DIR/$intname.conf
	local peer_dir=$WG_DIR/${intname}_peers
	# Finds lowest available peer number on interface
	
	#TODO make this part of choose_peer a seperate function
	#TODO TODO TODO this peerlist may need to be initialized here; see first function of script for example
	gen_peer_list $intname peerlist

    for i in $(seq 2 254)
    do
        if ! [[ -v "peerlist[$i]" ]]; then
			eval $2=$i
			return
		fi
    done
}

################################################################################################################################

gen_peer_list() {
	local intname=$1
	local intconf=$WG_DIR/$intname.conf
	local peer_dir=$WG_DIR/${intname}_peers
	
	local conf_files=($(find $WG_DIR/$peer_dir -type f -name "*.conf"))
	
	# This regex grabs everything but the last octet of the first address in the interface config
	local addr_prefix=$(sed -ne "/Address/ s/^.*=[[:space:]]*\([^,]*[\.:]\)[0-9]*\/.*/\1/p" $intconf)
					
	declare -A peers
	for i in "${conf_files[@]}"
	do
		local num=$(sed -ne "/Address/ s/^.*$addr_prefix\(.*\)\/.*/\1/p" $i)
		
		if [ $num -gt 254 ]; then
			printf "error - peer $i - peer number exceeds limit!\n"
			continue
		fi
		
		peers[$num]=$i
	done

	eval $2=$peers
}

edit_peer() {
	#TODO ask:
	printf "\nEdit peer: $VAR\n"
	printf '%s\n' "----------"
	printf "1) Re-Key Peer\n"
	printf "2) Re-Address Peer\n"
}

choose_int() {
	declare -n interfaces="$1"
	
	printf "   Interface    Public Key\n"
	printf "   ---------    ----------\n"
	n=1
	for i in "${!interfaces[@]}"
	do
		intarr[$n]=$i
		printf "$n) $i : ${interfaces[$i]}\n"
		((n++))
	done
	printf "\n$2 (1-${#intarr[@]})\n"
	
	while true; do
		read -p '> ' choice
		if ! [ -z ${intarr[$choice]} ]; then
			break
		fi
	done
	
	eval $3=${intarr[$choice]}
}

retrieve_interfaces() {
	declare -n interfaces="$1"
	local conf_files=($(find $WG_DIR -maxdepth 1 -type f -name "*.conf"))

	for i in "${conf_files[@]}"
	do
		name=$(basename $i .conf)
		pubkey=$(sed -ne 's/^.*PrivateKey[[:space:]]*=[[:space:]]*//p' $i | wg pubkey)
		interfaces[$name]=$pubkey
	done
}

new_interface() {
	printf "Create new interface\n"
	read -p "Interface Name: " name
	
	# IP Address Builder
	while true; do
		printf "Enter IPv6 Address in CIDR format (or enter for none).\n"
		read -p '> ' ipv6
		
		printf "Enter IPv4 Address in CIDR format (or enter for none).\n"
		read -p '> ' ipv4
		
		if [ "$ipv6" = "" ] && [ "$ipv4" = "" ]; then
			continue
		fi
		
		if [ "$ipv6" != "" ]; then
			addresses=$ipv6
			if [ "$ipv4" != "" ]; then
				addresses="$addresses, $ipv4"
			fi
		else
			addresses=$ipv4
		fi
		
		printf "Does this look correct?\n"
		printf "Address = $addresses\n"
		while true; do
			read -p "[y/n]: " ans
			if [ "$ans" = "y" ]; then
				break 2
			elif [ "$ans" = "n" ]; then
				break 1
			fi
		done
	done
	
	printf "Interface Listen Port (enter for default):\n"
	read -p "> " port
	if [ "$port" = "" ]; then
		port="51820"
	fi
	
	key=$(wg genkey)
	
	cat >$WG_DIR/$name.conf <<EOF
[Interface]
Address = $addresses
ListenPort = $port
PrivateKey = $key
EOF
	
	systemctl enable --now wg-quick@$name
	
	# create a new directory for peers
	mkdir $WG_DIR/${name}_peers
	# create template for peer configs
	create_peer_template $name
}

create_peer_template() {
	local name=$1
	local intconf=$WG_DIR/$name.conf
	local wd=$WG_DIR/${name}_peers
	clear
	printf "Creating Peer template for interface \"$name\"\n"
	
	pubkey=$(sed -ne 's/^.*PrivateKey[[:space:]]*=[[:space:]]*//p' $intconf | wg pubkey)
	port=$(sed -ne 's/^.*ListenPort[[:space:]]*=[[:space:]]*//p' $intconf)
	
	while true; do
		printf "\nEnter the FQDN or IP address of the VPN endpoint.\n"
		printf "Note: the port will be selected automatically.\n"
		read -p "FQDN/IP: " epaddr
		
		# If an IPv6 Address was entered (':' occurs more than once), encase in brackets
		if printf "$epaddr" | grep -q ':.*:' ; then
			epaddr="[$epaddr]"
		fi
		
		printf "\nEndpoint = $epaddr:$port\n"
		while true; do
			read -p "Does this look right? [y/n]: " ans
			if [ "$ans" = "y" ]; then
				break 2
			elif [ "$ans" = "n" ]; then
				break 1
			fi
		done
	done
	
	
	cat >$wd/template <<EOF
[Interface]
Address = 
PrivateKey = 
DNS = 

[Peer]
PublicKey = $pubkey
PresharedKey = 
AllowedIPs = 
Endpoint = $epaddr:$port
PersistentKeepalive = 25
EOF
}

delete_interface() {
	local int=$1
	printf "Note: this will delete the configuration file for the interface and all of its peers.\n"
	printf "Are you sure you want to delete the interface: \"$int\" ?\n"
	while true; do
		read -p "[y/n]: " ans
		if [ {$ans,,} = "y" ]; then
			break
		elif [ {$ans,,} = "n" ]; then
			return
		fi
	done
	
	systemctl disable --now wg-quick@$int
	rm -f $WG_DIR/$int.conf
	rm -rf $WG_DIR/${int}_peers
}

generate_peer_listold() {
        debug "generating peer list"

        # function argument
        CONFIG_FILE=$WG_DIR/vpn.conf

        NUM_PEERS=$(grep -o "\[Peer\]" $CONFIG_FILE | wc -l)

        debug "number of peers: $NUM_PEERS"

        declare -A PEERS
        for i in $(seq $NUM_PEERS)
        do
		debug "peer $i"

                # get peer preshared key
                PSK=$(awk -v n=$i '/^\[Peer\]/{l++} (l==n){print}' $CONFIG_FILE | sed -ne 's/^.*PresharedKey[[:space:]]*=[[:space:]]*//p')
		[ -z "$PSK" ] && break
		debug "peer $i psk is: $PSK"

		# search peer config files for that preshared key
                peer_CONF=$(grep -Ral $PSK $peer_DIR)
		debug "peer conf path: $peer_CONF"
                # get peer number from its config file
                IP_PREFIX=$(printf "$IPV6_PREFIX\|$IPV4_PREFIX" | sed  's/\./\\./g')
                peer_NUM=$(sed -ne "/Address/ s/^.*\($IP_PREFIX\)\(.*\)\/.*/\2/p" $peer_CONF)
		debug "peer $i num is: $peer_NUM"

                PEERS[$peer_NUM]=$peer_CONF
        done

	debug "there are ${#PEERS[@]} members in teh array"

	for i in "${!PEERS[@]}"
	do
		printf "key : $i\n"
		printf "value : ${PEERS[$i]}\n"
	done
}

todo() {
	printf "\nFeature coming soon!\n"
	sleep 2
}

main
